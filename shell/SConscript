# vim: ft=python expandtab
from xml.etree.ElementTree import SubElement
from uuid import uuid4
from site_init import *

Import('env run_target dev_target')
'''
	-I$(top_srcdir)				\
	-I$(top_srcdir)/libdocument		\
	-DGNOMELOCALEDIR=\"$(datadir)/locale\"  \
	-DEVINCE_COMPILATION			\
	$(BACKEND_CFLAGS)			\
	$(POPPLER_CFLAGS)                       \
	$(WARN_CXXFLAGS)			\
	$(DISABLE_DEPRECATED)
'''
env_evshell = env.Clone(PDB='evince.pdb')
env_evshell.Append(CPPDEFINES = [("GNOMELOCALEDIR", r'"\"' + env['PREFIX'].replace('\\', r'\\') + r'\\share\\locale\""'),
                                 ("GNOMEICONDIR", r'"\"' + env['PREFIX'].replace('\\', r'\\') + r'\\share\\evince\\pixmap\""'),
                                 ("BINDIR", r'"\"' + env['PREFIX'].replace('\\', r'\\') + r'\\bin\""'),
                                 ("LIBEXEDIR", r'"\"' + env['PREFIX'].replace('\\', r'\\') + r'\\bin\""'),
                                 ("DATADIR", r'"\"' + env['PREFIX'].replace('\\', r'\\') + r'\\share\\evince\""'),
                                 ("GNOMEDATADIR", r'"\"' + env['PREFIX'].replace('\\', r'\\') + r'\\share\\evince\""'),
                                 ("_WIN32_WINNT", "0x0500"),
                                 ("EVINCE_COMPILATION")])
env_evshell.Append(CPPPATH=['#', '#libdocument', '#libview', '#properties', '#libmisc', '#cut-n-paste/totem-screensaver', '#cut-n-paste/evinfobar', '#cut-n-paste/zoom-control', '#cut-n-paste/toolbar-editor', '#cut-n-paste/gimpcellrenderertoggle', '#cut-n-paste/smclient', '../msvc'])

evince_SOURCES=Split("\
	eggfindbar.c			\
	ev-application.c		\
	ev-file-monitor.c		\
	ev-history.c			\
	ev-keyring.c			\
	ev-marshal.c			\
	ev-message-area.c		\
	ev-metadata.c			\
	ev-navigation-action.c		\
	ev-navigation-action-widget.c	\
	ev-password-view.c		\
	ev-progress-message-area.c	\
	ev-properties-dialog.c		\
	ev-properties-fonts.c		\
	ev-properties-license.c		\
	ev-open-recent-action.c		\
	ev-utils.c			\
	ev-window.c			\
	ev-window-title.c		\
	ev-sidebar.c			\
	ev-sidebar-attachments.c	\
	ev-sidebar-layers.c		\
	ev-sidebar-links.c		\
	ev-sidebar-page.c		\
	ev-sidebar-thumbnails.c		\
	main.c")

env_evshell['GLIB_GENMARSHAL_ARGV'] = [('prefix', 'ev_marshal')]
env_evshell.MarshalGenerator(['ev-marshal.c', 'ev-marshal.h'], 'ev-marshal.list')
env_evshell.Depends(['ev-marshal.c', 'ev-marshal.h'], 'SConscript')

env_evshell.ParseConfig('pkg-config glib-2.0 --cflags --libs')
env_evshell.ParseConfig('pkg-config gthread-2.0 --cflags --libs')
env_evshell.ParseConfig('pkg-config gio-2.0 --cflags --libs')
env_evshell.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')
env_evshell.ParseConfig('pkg-config atk --cflags --libs')
env_evshell.ParseConfig('pkg-config cairo --cflags --libs')
env_evshell.ParseConfig('pkg-config pango --cflags --libs')
env_evshell.ParseConfig('pkg-config poppler-glib --cflags --libs')
env_evshell.ParseConfig('pkg-config libxml-2.0 --cflags --libs')

env_evshell.Append(CPPPATH="#data")
#env_evshell.Append(LDFLAGS="-mwindow")

evince = env_evshell.Program(['evince.exe'], evince_SOURCES + ['#properties/evproperties.lib', '#libdocument/evdocument.lib', '#libview/evview.lib', '#libmisc/evmisc.lib', '#cut-n-paste/evinfobar/evinfobar.lib', '#cut-n-paste/smclient/evsmclient.lib', '#cut-n-paste/toolbar-editor/evtoolbareditor.lib', '#cut-n-paste/totem-screensaver/evtotemscrsaver.lib','#cut-n-paste/gimpcellrenderertoggle/evgimpcellrenderertoggle.lib', '#cut-n-paste/zoom-control/evephyzoom.lib', env_evshell.RES('evince-icon.rc')])
env_evshell.AddPostAction(evince, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
if not env_evshell['DEBUG']:
    env_evshell.AddPostAction(evince, 'editbin.exe /subsystem:windows $TARGET')

env_evshell.Alias('install', env_evshell.Install('$PREFIX/bin', 'evince.exe'))
run_dbin = find_tag_by_id(run_target, 'Directory', 'bin')
if run_dbin == None:
    run_dbin = SubElement(run_target, 'Directory', Id='bin', Name='bin')
    run_cexe = SubElement(run_dbin, "Component", Id='exes', Guid=str(uuid4()).upper())
else:
    run_cexe = find_tag_by_id(run_dbin, 'Component', 'exes')
    if run_cexe == None:
        run_cexe = SubElement(run_dbin, "Component", Id='exes', Guid=str(uuid4()).upper())
FileElement(run_cexe, 'evince.exe', 'bin', env_evshell)

if env_evshell['DEBUG'] == 1:
    env_evshell.Alias('install', env_evshell.Install('$PREFIX/pdb', 'evince.pdb'))
    dev_dpdb = find_tag_by_id(dev_target, 'Directory', 'pdb')
    if dev_dpdb == None:
        dev_dpdb = SubElement(dev_target, 'Directory', Id='pdb', Name='pdb')
        dev_cpdb = SubElement(dev_dpdb, "Component", Id='pdbs', Guid=str(uuid4()).upper())
    else:
        dev_cpdb = find_tag_by_id(dev_dpdb, 'Component', 'pdbs')
        if dev_cpdb == None:
            dev_cpdb = SubElement(dev_dpdb, "Component", Id='pdbs', Guid=str(uuid4()).upper())
    FileElement(dev_cpdb, env_evshell['PDB'], 'pdb', env_evshell)

